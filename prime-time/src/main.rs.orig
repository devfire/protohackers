use tokio::io::{self, AsyncBufReadExt, AsyncWriteExt};
// use tokio::net::TcpListener;
// use std::net::{IpAddr, Ipv4Addr, SocketAddr};

use tokio::net::{TcpListener, TcpStream};

use serde::{Deserialize, Serialize};
use validator::{Validate, ValidationError};
use primes;

#[derive(Debug, Deserialize, Validate)]
struct Request {
    #[validate(length(min = 1), custom = "validate_method")]
    method: String,

    #[validate(range(min = 1))]
    number: f32,
}

#[derive(Debug, Serialize, Validate)]
struct Response {
    #[validate(length(min = 1), custom = "validate_method")]
    method: String,

    prime: bool,
}

fn validate_method(method: &str) -> Result<(), ValidationError> {
    if method != "isPrime" {
        return Err(ValidationError::new("Method must be isPrime"));
    }
    Ok(())
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let listener = TcpListener::bind("127.0.0.1:8080").await?;

    while let Ok((stream, addr)) = listener.accept().await {
        println!("New connection from {}", addr);

        let stream = stream;
        let (reader, mut writer) = tokio::io::split(stream);
        let mut reader = io::BufReader::new(reader);


        tokio::spawn(async move {
            // In a loop, read data from the socket and write the data back.
            let mut reader = BufReader::new(&mut stream);
            loop {
                let mut line = String::new();

                // we don't really need to keep the buffer size, only to ensure it's non 0 to proceed
                let _n = match reader.read_line(&mut line).await {
                    Ok(n) if n == 0 => return, // socket closed
                    Ok(n) => println!("Read {} bytes", n),
                    Err(e) => {
                        eprintln!("failed to read from socket; err = {:?}", e);
                        return;
                    }
                };

                // attempt to deserialize the payload into JSON
                let request: Result<Request, _> = serde_json::from_str(&line);

                match request {
                    Ok(request) => {
                        // validate the fields in the Request struct
                        let request_validation = request.validate();

                        if let Err(e) = request_validation {
                            println!("{}", e)
                        } else {
                            println!("Valid request: {:?}", request);

                            // set the prime bool to false by default
                            let mut response = Response {
                                method: String::from("isPrime"),
                                prime: false,
                            };

                            // check to see if the passed number is prime.
                            if primes::is_prime(request.number as u64) {
                                // flip the prime bool to true since the number is prime,
                                // otherwise it stays false
                                response.prime = true;

                                // encode the JSON response as a vec of bytes,
                                // we get back a Result<>
                                let response_bytes = serde_json::to_vec(&response);
                                match response_bytes {
                                    Ok(response_bytes) => {
                                        stream.write_all(&response_bytes).await.unwrap();
                                    }
                                    Err(e) => {
                                        println!("ERROR: {}", e);
                                        return;
                                    }
                                };
                            }
                        }
                    }
                    Err(e) => {
                        // request is invalid, send an error response
                        println!("ERROR: JSON parsing failed due to invalid request: {}", e);
                    }
                }
            }
        });
    }
}
